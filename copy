
if(process.env.NODE_ENV !=='production'){
    require('dotenv').config()
}

const express=require("express")
const app=express();
const bcrypt=require("bcrypt")//to secure password install npm i bcrypt
const passport=require('passport')
const intializePassport=require('./passport-config')
const flash=require("express-flash")
const session=require("express-session")
const method=require("method-override")
intializePassport(passport,email=> users.find(user=>user.email===email),
id => users.find(user=>user.id===id)

)

const users=[];

app.set('view-engine','ejs')
app.use(express.urlencoded({extended:false}))
app.use(method('_method'))
app.use(flash())
app.use(session({
    secret: process.env.SESSION_SECRET,
    resave:false,
    saveUnutilized:false
}))
app.use(passport.initialize())
app.use(passport.session())


app.get('/',checkAuthenticate,(req,res)=>{
res.render("index.ejs",{name:req.user.name})
});

app.get('/login',checkNotAuthenticate,(req,res)=>{
res.render("login.ejs")
});

app.get('/register',checkNotAuthenticate,(req,res)=>{
res.render("register.ejs")
});

app.post('/register',checkNotAuthenticate, async (req,res)=>{
    try{
        const hashPass= await bcrypt.hash(req.body.password,10)
        users.push({
            id:Date.now().toString(),
            name:req.body.name,
            email:req.body.email,
            password:hashPass
        })   
        res.redirect('/login')
     }catch{
        res.redirect('/register')
    }
    console.log(users);
});

app.delete('/logout',(req,res)=>{
    req.logOut()
    res.redirect('/login')
})

app.post('/login',checkNotAuthenticate,passport.authenticate('local',{
    successRedirect:'/',
    failureRedirect:'/login',
    failureFlash:true
}))

function checkAuthenticate(req,res,next){
    if(req.isAuthenticated()){
        return next()
    }

    res.redirect('/login')
}
function checkNotAuthenticate(req,res,next){
    if(req.isAuthenticated()){
       return res.redirect('/')
    }
    next()
}

app.listen(3000)